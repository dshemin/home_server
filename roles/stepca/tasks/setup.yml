---
- name: "Look for existing install"
  ansible.builtin.stat:
    path: "{{ stepca_config_file }}"
  register: stepca_config_present

- name: "Initialize CA"
  ansible.builtin.command: >-
    {{ stepca_cli_executable }} ca init
    --deployment-type=standalone
    --name={{ stepca_name | quote }}
    --dns={{ stepca_dns | quote }}
    --address={{ stepca_address | quote }}
    --provisioner={{ stepca_provisioner | quote }}
    --password-file={{ stepca_root_password_file | quote }}
    --provisioner-password-file={{ stepca_root_password_file | quote }}
    --acme
    --remote-management
  environment:
    STEPPATH: "{{ stepca_home_dir }}"
  become: true
  become_user: "{{ stepca_user }}"
  when: "not stepca_config_present.stat.exists"

- name: "Systemd unit file is present"
  ansible.builtin.template:
    src: "step-ca.service.j2"
    dest: "{{ stepca_service_file }}"
    owner: "root"
    group: "root"
    mode: 0644

- name: "Service is enabled and running"
  ansible.builtin.systemd:
    name: "{{ stepca_service_name }}"
    state: "started"
    enabled: true
    daemon_reload: true

- name: "Check is already bootstrapped"
  ansible.builtin.command: "{{ stepca_cli_executable }} ca health"
  ignore_errors: true
  register: "stepca_bootstrapped"

- name: "Bootstrap step CLI"
  when: "stepca_bootstrapped.rc != 0"
  block:
    - name: "Get root ca certificate fingerprint"
      ansible.builtin.command: "{{ stepca_cli_executable }} certificate fingerprint {{ stepca_ca_root_file }}"
      register: "stepca_fingerprint"

    - name: "Bootstrap"
      ansible.builtin.command: >-
        {{ stepca_cli_executable }} ca bootstrap
        --ca-url='https://127.0.0.1:{{ stepca_port }}'
        --fingerprint={{ stepca_fingerprint.stdout | quote }}
        --install
        --force

- name: "Make sure everything works"
  ansible.builtin.command: "{{ stepca_cli_executable }} ca health"
  failed_when: "stepca_healthcheck.stdout != 'ok'"
  register: "stepca_healthcheck"
